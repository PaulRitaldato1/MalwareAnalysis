#!/usr/bin/python3

import os
from os import path
import subprocess

def main():

    with open(".gitignore", "a+") as f:
        if ('.bin/' not in f.read()):
            f.write("\n.bin/")
            f.write("\nbuild/")

    if(not path.isdir(".bin/")):
        os.mkdir(".bin/")
    else:
        raise Exception("Setup Script already run!")

    script = """#!/usr/bin/python3
import argparse
import subprocess
import os
from os import path

projectRoot = "{pRoot}"
def build():
    global projectRoot
    if(not path.isdir(projectRoot + "/build/")):
        os.mkdir(projectRoot + "/build/")
    os.chdir(projectRoot + "/build/")
    cmakeCommand = "cmake .."
    makeCommand =  "make -j16"
    subprocess.run(cmakeCommand.split())
    subprocess.run(makeCommand.split())

def run():
    global projectRoot
    if(not path.isdir(projectRoot + "/build/")):
        raise Exception("You haven't built the project. Try mw 'build'")
    os.chdir(projectRoot + "/build/")
    if(not path.exists("MalwareDetector")):
        raise Exception("You haven't built the project. Try mw 'build'")
    subprocess.run("./MalwareDetector")
    
def main():
    parser = argparse.ArgumentParser("General purpose malware detector tool to build and run the project")
    parser.add_argument("-build", action="store_true", help="Build the project", required=False)
    parser.add_argument("-run", action="store_true", help="Run the project", required=False)
    args = parser.parse_args()

    if(args.build):
        build()
    elif(args.run):
        run()
    else:
        parser.print_help()

main()"""
    with open(".bin/mw", "a+") as f:
        f.write(script.format(pRoot=os.getcwd()))
    subprocess.run("chmod u+x .bin/mw".split())
    home = os.environ.get('HOME')
    commandPath = os.getcwd() + "/.bin/"
    with open(home + "/.zprofile", "a+") as f:
            f.write("export PATH=\"$PATH:" + commandPath + "\"")

main()


