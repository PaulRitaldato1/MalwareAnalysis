#!/usr/bin/python3

import os
from os import path
import subprocess
import sys

def main():

    with open(".gitignore", "a+") as f:
        if ('.bin/' not in f.read()):
            f.write("\n.bin/")
            f.write("\nbuild/")
            f.write("\n.vscode/")

    if(not path.isdir(".bin/")):
        os.mkdir(".bin/")
    else:
        sys.exit("Setup Script already run!")

    script = """#!/usr/bin/python3
import argparse
import subprocess
import os
from os import path
import sys

projectRoot = "{pRoot}"
def build(buildType):
    global projectRoot

    buildType = buildType.lower()
    if(buildType == "release"):
        buildType = "Release"
    elif(buildType == "debug"):
        buildType = "Debug"
    else:
        sys.exit("No valid build type passed!")
    
    if(not path.isdir(projectRoot + "/build/")):
        os.mkdir(projectRoot + "/build/")
        os.mkdir(projectRoot + "/build/Release/")
        os.mkdir(projectRoot + "/build/Debug/")

    if(buildType == "Release"):
        os.chdir(projectRoot + "/build/Release")
    elif(buildType == "Debug"):
        os.chdir(projectRoot + "/build/Debug")

    buildTypeArg = "-DCMAKE_BUILD_TYPE=" + buildType
    cmakeCommand = "cmake " + buildTypeArg + " ../.."
    makeCommand =  "make -j16"
    subprocess.run(cmakeCommand.split())
    subprocess.run(makeCommand.split())

def run(buildType):
    kill()
    global projectRoot
    if(not path.isfile(projectRoot + "/build/" + buildType + "/MalwareDetector")):
        sys.exit("\\nYou haven't built the project type requested!\\nYou may have built another type or none at all.\\nTry mw build <build type>\\nValid types are ['release', 'debug']")

    buildType = buildType.lower()
    if(buildType == "release"):
        buildType = "Release"
    elif(buildType == "debug"):
        buildType = "Debug"
    else:
        sys.exit("No valid build type passed!")
    
    subprocess.Popen([projectRoot + "/build/" + buildType + "/MalwareDetector"])

def kill():
    sub = subprocess.Popen(['ps', '-A'], stdout=subprocess.PIPE)
    output, error = sub.communicate()
    target_process = "MalwareDetector"
    print("Killing process...")
    for line in output.splitlines():
        if target_process in str(line):
            pid = int(line.split(None, 1)[0])
            os.kill(pid, 9)
            print("Killed process " + target_process + " succesfully")
            return

    print("Process not found: process was not or is still running!")

def push(message):
    add = "git add *"
    status = "git status"
    commit = "git commit -m \\\"{message}\\\""
    push = "git push"
    
    os.chdir(projectRoot)

    subprocess.run(add.split())
    subprocess.run(status.split())
    commit = commit.format(message=message)
    message = commit.split("\\\"")[1]

    
    list = []
    for x in range(3):
        list.append(commit.split()[x]) 
    list.append(message)
    subprocess.run(list)

    subprocess.run(push.split())


def main():
    parser = argparse.ArgumentParser("General purpose malware detector tool to build and run the project")
    parser.add_argument('command', nargs='*', help="Ignore this, its an abstraction")
    parser.add_argument('-build', action="store_true", help="Build the project", required=False)
    parser.add_argument("-run", action="store_true", help="Run the project", required=False)
    parser.add_argument("-kill", action="store_true", help="kill the process", required=False)
    parser.add_argument("-iter", action="store_true", help="Iterate on the build, builds and runs the project", required=False)
    parser.add_argument("-push", nargs=1, metavar=('message'), help="Add, commit, and push all current changes to current branch.")
    args = parser.parse_args()

    if(args.command[0] == 'build' or args.build):
        if (len(args.command) < 2):
            message = "You must provide a build type when buildng.\\nValid types are ['release', 'debug']\\nExiting build..."
            sys.exit(message)
        build(args.command[1])
    elif(args.command[0] == 'run' or args.run):
        if (len(args.command) < 2):
            message = "You must provide a build type when running.\\nValid types are ['release', 'debug']\\nExiting build..."
            sys.exit(message)
        run(args.command[1])
    elif(args.command[0] == 'kill' or args.kill):
        kill()
    elif(args.command[0] == 'iter' or args.iter):
        build()
        run()
    elif(args.command[0] == 'push' or args.push):
        push(args.command[0])
    else:
        parser.print_help()

main()"""
    with open(".bin/mw", "a+") as f:
        f.write(script.format(pRoot=os.getcwd(), message="{message}"))
    subprocess.run("chmod u+x .bin/mw".split())
    home = os.environ.get('HOME')
    commandPath = os.getcwd() + "/.bin/"
    with open(home + "/.zprofile", "a+") as f:
            f.write("export PATH=\"$PATH:" + commandPath + "\"")

main()


