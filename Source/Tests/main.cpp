#include <iostream>
#include <xmmintrin.h>
#include "../Parallelization/Threading/ThreadPool.h"
#include <vector>
#include <chrono>
#include <list>
#include <fstream>
#include <unordered_map>



enum test
{
    a = 1 << 0,
    b = 1 << 1,
    c = 1 << 2,
    d = 1 << 3,
};

enum test2
{
    s,
    f,
    g,
    count2
};

class base
{
    public:
        virtual unsigned getThread();

};

class testclass
{
    public:
    ~testclass()
    {
        std::cout << "In destructor" << std::endl;
    }
    testclass()
    {
        std::cout << "In constructor" << std::endl;
    }
        // int* p;
        // testclass(int num)
        // {
        //     p = new int(num);
        //     pool = new ThreadPool();
        // }

        // testclass(){}

        // inline int* getnum()
        // {
        //     int* t = p;
        //     p = new int(1);
            
        //     return t;
        // }
        unsigned getThread()
        {
            return 5;
        }

        testclass* getThis()
        {
            return this;
        }
};

// static int allocated = 0;
// static int deAllocated = 0;
// void* operator new(size_t size)
// {
//     allocated += size;
//     std::cout << "Allocating: " << size << std::endl;
//     return malloc(size);
// }

// void operator delete(void* memory, size_t size)
// {
//     deAllocated += size;
//     std::cout << "Freeing: " << size << std::endl;
//     free(memory);
// }

int test(testclass& t)
{
    std::cout << "Do nothing" << std::endl;
    return 1;
}

        struct Node
        {
            std::unordered_map<char, std::unique_ptr<Node>> charMap;
            bool isWord = false;
        };

std::vector<std::unique_ptr<Node>> te()
{
    std::vector<std::unique_ptr<Node>> vec;
    vec.emplace_back(std::make_unique<Node>());
    vec.emplace_back(std::make_unique<Node>());
    vec[1]->isWord = true;
    return vec;
}

//#include "../Datastructures/Trie.h"
#include "../Extraction/ExtractionManager.h"
#include <filesystem>
void t(int8_t te)
{
    std::cout << (int)te << std::endl;
}

void areAllBitsSet(int n) 
{ 
    std::cout << n << std::endl;
    // all bits are not set 
    if (n == 0)
    { 
        std::cout << "NO" << std::endl;
        return;
    }
  
    // loop till n becomes '0' 
    while (n > 0) 
    { 
        // if the last bit is not set 
        if ((n & 1) == 0)
        { 
            std::cout << "NO" << std::endl;
            return;
        }
  
        // right shift 'n' by 1 
        n = n >> 1; 
    } 
  
    // all bits are set 
    std::cout << "Yes" << std::endl; 
} 

#include "../Database/DBManager.h"
int main()
{
    std::string path = "/mnt/c/Users/paulr/Documents/Malware-Detector  V2/Test Files";
    Extractor::FeatureMask mask;
    //areAllBitsSet(mask.mask);
    extractFromDirectory(path, mask, true);

    DB::DBManager manager;
    
    //ThreadPool pool(-1);
    // while(true){}
    // ThreadPool pool;
    // std::vector<std::future<unsigned>> vec;
    // testclass t;
    // for(int i = 0; i < 5; ++i)
    // {
    //     auto func = std::bind(&testclass::getThread, &t);
    //     pool.push(func);
    // }

    // std::string test = "hello";
    // std::string test1 = "hello2";
    
    // Trie t;
    
    // t.insert(test);
    // std::cout << (t.search("Hello")  ? "PASS" : "FAIL") << std::endl;
    // std::cout << (t.search(test1) ? "FAIL" : "PASS") << std::endl;

    // t.insert(test1);
    // std::cout << (t.search("hello2")  ? "PASS" : "FAIL") << std::endl;

    // t.remove(test1);

    // std::cout << (t.search("hello2")  ? "FAIL" : "PASS") << std::endl;

   
/* ----------------------- STD::HASH AND STD::UNORDERED_MAP ARE TEH SAME HASh FCN ----------- */
    std::unordered_map<std::string, int> m;
    std::unordered_map<std::size_t, int> map;

    typedef std::unordered_map<std::string,std::string> stringmap;
    stringmap mymap;

    stringmap::hasher fn = mymap.hash_function();
    m["Hello"] = 5;
    for (auto a : m)
        std::cout << fn("Hello") << std::endl;
    map[std::hash<std::string>{}("Hello")] = 10;
    
    for (auto a : map)
        std::cout << a.first << std::endl;
/*---------------------------------------------------*/
    return 0;


}