#include <iostream>
#include <xmmintrin.h>
#include <experimental/filesystem>
#include "../Parallelization/Threading/ThreadPool.h"
#include <vector>
#include <chrono>
namespace fs = std::experimental::filesystem;

enum test
{
    a = 1 << 0,
    b = 1 << 1,
    c = 1 << 2,
    d = 1 << 3,
};

enum test2
{
    s,
    f,
    g,
    count2
};

class base
{
    protected:
        ThreadPool* pool;
};

class testclass : public base
{
    public:
        int* p;
        testclass(int num)
        {
            p = new int(num);
            pool = new ThreadPool();
        }

        testclass(){}
        
        inline int* getnum()
        {
            int* t = p;
            p = new int(1);
            
            return t;
        }

        int getThread()
        {
            return pool->getThreadCount();
        }
};

int main()
{
    // ThreadPool pool;
    // pool.push([](){std::cout << "Hello from threadpool lambda";});
    // std::cout << test::a << std::endl;
    // std::cout << test::b << std::endl;
    // std::cout << test::c << std::endl;
    // std::cout << test::d << std::endl;

    // std::cout << (1 << (sizeof(test)-1)) << std::endl;
    testclass c(4);
    int* p = c.getnum();
    std::cout << c.getThread() << std::endl;
    //std::cout << *p << std::endl;
    //std::cout << *c.getnum() << std::endl;

}