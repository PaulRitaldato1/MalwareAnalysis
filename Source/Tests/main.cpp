#include <iostream>
#include <xmmintrin.h>
#include "../Parallelization/Threading/ThreadPool.h"
#include <vector>
#include <chrono>
#include <list>
#include <fstream>
#include <unordered_map>



enum test
{
    a = 1 << 0,
    b = 1 << 1,
    c = 1 << 2,
    d = 1 << 3,
};

enum test2
{
    s,
    f,
    g,
    count2
};

class base
{
    public:
        virtual unsigned getThread();

};

class testclass
{
    public:
    ~testclass()
    {
        std::cout << "In destructor" << std::endl;
    }
    testclass()
    {
        std::cout << "In constructor" << std::endl;
    }
        // int* p;
        // testclass(int num)
        // {
        //     p = new int(num);
        //     pool = new ThreadPool();
        // }

        // testclass(){}

        // inline int* getnum()
        // {
        //     int* t = p;
        //     p = new int(1);
            
        //     return t;
        // }
        unsigned getThread()
        {
            return 5;
        }

        testclass* getThis()
        {
            return this;
        }
};

// static int allocated = 0;
// static int deAllocated = 0;
// void* operator new(size_t size)
// {
//     allocated += size;
//     std::cout << "Allocating: " << size << std::endl;
//     return malloc(size);
// }

// void operator delete(void* memory, size_t size)
// {
//     deAllocated += size;
//     std::cout << "Freeing: " << size << std::endl;
//     free(memory);
// }

int test(testclass& t)
{
    std::cout << "Do nothing" << std::endl;
    return 1;
}

        struct Node
        {
            std::unordered_map<char, std::unique_ptr<Node>> charMap;
            bool isWord = false;
        };

std::vector<std::unique_ptr<Node>> te()
{
    std::vector<std::unique_ptr<Node>> vec;
    vec.emplace_back(std::make_unique<Node>());
    vec.emplace_back(std::make_unique<Node>());
    vec[1]->isWord = true;
    return vec;
}

//#include "../Datastructures/Trie.h"
#include "../Extraction/ExtractionManager.h"
#include <filesystem>
void t(int8_t te)
{
    std::cout << (int)te << std::endl;
}

void areAllBitsSet(int n) 
{ 
    std::cout << n << std::endl;
    // all bits are not set 
    if (n == 0)
    { 
        std::cout << "NO" << std::endl;
        return;
    }
  
    // loop till n becomes '0' 
    while (n > 0) 
    { 
        // if the last bit is not set 
        if ((n & 1) == 0)
        { 
            std::cout << "NO" << std::endl;
            return;
        }
  
        // right shift 'n' by 1 
        n = n >> 1; 
    } 
  
    // all bits are set 
    std::cout << "Yes" << std::endl; 
} 

#include "../Database/DBManager.h"
#include <array>

#include <fcntl.h> 
#include <sys/stat.h> 
#include <sys/types.h> 
#include <unistd.h> 
#include <errno.h>
#include <string.h>
#include <stdio.h>
#include <vector>
#include <fstream>
#include "../Extraction/PEFIles/WinAPITypeDefs.h"
namespace fs = std::filesystem;
int main()
{

    fs::path ntpd("../../Data/Tests/notepad.exe");
    int sz = fs::file_size(ntpd);

    std::ifstream file(ntpd, std::ios::binary);
    char* buffer;
    buffer = new char[sz];
    file.read(buffer, sz);

    PIMAGE_DOS_HEADER dosHeader = {};
    dosHeader = reinterpret_cast<PIMAGE_DOS_HEADER>(buffer);
    printf("******* DOS HEADER *******\n");
	printf("\t0x%x\t\tMagic number\n", dosHeader->e_magic);
	printf("\t0x%x\t\tBytes on last page of file\n", dosHeader->e_cblp);
	printf("\t0x%x\t\tPages in file\n", dosHeader->e_cp);
	printf("\t0x%x\t\tRelocations\n", dosHeader->e_crlc);
	printf("\t0x%x\t\tSize of header in paragraphs\n", dosHeader->e_cparhdr);
	printf("\t0x%x\t\tMinimum extra paragraphs needed\n", dosHeader->e_minalloc);
	printf("\t0x%x\t\tMaximum extra paragraphs needed\n", dosHeader->e_maxalloc);
	printf("\t0x%x\t\tInitial (relative) SS value\n", dosHeader->e_ss);
	printf("\t0x%x\t\tInitial SP value\n", dosHeader->e_sp);
	printf("\t0x%x\t\tInitial SP value\n", dosHeader->e_sp);
	printf("\t0x%x\t\tChecksum\n", dosHeader->e_csum);
	printf("\t0x%x\t\tInitial IP value\n", dosHeader->e_ip);
	printf("\t0x%x\t\tInitial (relative) CS value\n", dosHeader->e_cs);
	printf("\t0x%x\t\tFile address of relocation table\n", dosHeader->e_lfarlc);
	printf("\t0x%x\t\tOverlay number\n", dosHeader->e_ovno);
	printf("\t0x%x\t\tOEM identifier (for e_oeminfo)\n", dosHeader->e_oemid);
	printf("\t0x%x\t\tOEM information; e_oemid specific\n", dosHeader->e_oeminfo);
	printf("\t0x%x\t\tFile address of new exe header\n", dosHeader->e_lfanew);

    PIMAGE_NT_HEADERS64 ntHeader = (PIMAGE_NT_HEADERS64)((std::uintptr_t)dosHeader + (std::uintptr_t)dosHeader->e_lfanew);
    // std::cout << std::hex << (std::uintptr_t)dosHeader << std::endl;
    // std::cout << std::hex << ntHeader << std::endl;
    printf("\n******* FILE HEADER *******\n");
	printf("\t0x%x\t\tMachine\n", ntHeader->FileHeader.Machine);
	printf("\t0x%x\t\tNumber of Sections\n", ntHeader->FileHeader.NumberOfSections);
	printf("\t0x%x\tTime Stamp\n", ntHeader->FileHeader.TimeDateStamp);
	printf("\t0x%x\t\tPointer to Symbol Table\n", ntHeader->FileHeader.PointerToSymbolTable);
	printf("\t0x%x\t\tNumber of Symbols\n", ntHeader->FileHeader.NumberOfSymbols);
	printf("\t0x%x\t\tSize of Optional Header\n", ntHeader->FileHeader.SizeOfOptionalHeader);
	printf("\t0x%x\t\tCharacteristics\n", ntHeader->FileHeader.Characteristics);

    printf("\n******* OPTIONAL HEADER *******\n");
	printf("\t0x%x\t\tMagic\n", ntHeader->OptionalHeader.Magic);

    // std::cout << std::hex << ntHeader->OptionalHeader.Magic << std::endl;
    // std::cout << std::hex << ntHeader->OptionalHeader.SizeOfCode << std::endl;
    // std::cout << std::hex << ntHeader->OptionalHeader.BaseOfCode << std::endl;


    std::uintptr_t sectionLocation = (std::uintptr_t)ntHeader + sizeof(DWORD) + (DWORD)(sizeof(IMAGE_FILE_HEADER)) + (DWORD)ntHeader->FileHeader.SizeOfOptionalHeader;
    std::cout << std::endl;
    DWORD sectionSize = (std::uintptr_t)sizeof(IMAGE_SECTION_HEADER);
    
    PIMAGE_SECTION_HEADER sectionHeader;
    PIMAGE_SECTION_HEADER importSection;
    DWORD importDirectoryRVA = ntHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress;
    for (int i = 0; i < ntHeader->FileHeader.NumberOfSections; i++) 
    {
		sectionHeader = (PIMAGE_SECTION_HEADER)sectionLocation;
		printf("\t%s\n", sectionHeader->Name);
		printf("\t\t0x%x\t\tVirtual Size\n", sectionHeader->Misc.VirtualSize);
		printf("\t\t0x%x\t\tVirtual Address\n", sectionHeader->VirtualAddress);
		printf("\t\t0x%x\t\tSize Of Raw Data\n", sectionHeader->SizeOfRawData);
		printf("\t\t0x%x\t\tPointer To Raw Data\n", sectionHeader->PointerToRawData);
		printf("\t\t0x%x\t\tPointer To Relocations\n", sectionHeader->PointerToRelocations);
		printf("\t\t0x%x\t\tPointer To Line Numbers\n", sectionHeader->PointerToLinenumbers);
		printf("\t\t0x%x\t\tNumber Of Relocations\n", sectionHeader->NumberOfRelocations);
		printf("\t\t0x%x\t\tNumber Of Line Numbers\n", sectionHeader->NumberOfLinenumbers);
		printf("\t\t0x%x\tCharacteristics\n", sectionHeader->Characteristics);

        if (importDirectoryRVA >= sectionHeader->VirtualAddress && importDirectoryRVA < sectionHeader->VirtualAddress + sectionHeader->Misc.VirtualSize) 
        {
		    importSection = sectionHeader;
		}

		sectionLocation += sectionSize;
	}
    
    std::uintptr_t rawOffset = (std::uintptr_t)buffer + importSection->PointerToRawData;

    IMAGE_IMPORT_DESCRIPTOR* importDescriptor = (PIMAGE_IMPORT_DESCRIPTOR)(rawOffset + (ntHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress - importSection->VirtualAddress));
    
    PIMAGE_THUNK_DATA thunkData = {};
	DWORD thunk = NULL;
    std::vector<std::string> toDump;
    printf("\n******* DLL IMPORTS *******\n");
	for (; importDescriptor->Name != 0; importDescriptor++)	
    {
		// imported dll modules
		//printf("\t%s\n", (char*)(rawOffset + (importDescriptor->Name - importSection->VirtualAddress)));
        toDump.emplace_back("\t" + std::string((char*)(rawOffset + (importDescriptor->Name - importSection->VirtualAddress))) + "\n");
		thunk = importDescriptor->DUMMYUNIONNAME.OriginalFirstThunk == 0 ? importDescriptor->FirstThunk : importDescriptor->DUMMYUNIONNAME.OriginalFirstThunk;
		thunkData = (PIMAGE_THUNK_DATA)(rawOffset + (thunk - importSection->VirtualAddress));
		
		// dll exported functions
		for (; thunkData->u1.AddressOfData != 0; thunkData++) 
        {
			//a cheap and probably non-reliable way of checking if the function is imported via its ordinal number ¯\_(ツ)_/¯
			if (thunkData->u1.AddressOfData > 0x80000000) 
            {
				//show lower bits of the value to get the ordinal ¯\_(ツ)_/¯
				//printf("\t\tOrdinal: %x\n", (WORD)thunkData->u1.AddressOfData);
                // std::string s = std::string(thunkData->u1.AddressOfData);
                // toDump.emplace_back(s);
			} 
            else 
            {
				//printf("\t\t%s\n", (rawOffset + (thunkData->u1.AddressOfData - importSection->VirtualAddress + 2)));
                std::string s = "\t\t" + std::string((char*)(rawOffset + (thunkData->u1.AddressOfData - importSection->VirtualAddress + 2))) + "\n";
                toDump.emplace_back(s);
			}
		}
	}
    delete [] buffer;
    std::ofstream fout("DLLs.txt");
    if(!fout.is_open())
        throw std::runtime_error("The fuck");
    for(auto& s : toDump)
    {
        fout << s;
    }
    fout.close();
    file.close();
    // std::string path = "/home/paul/Atheris";
    // std::string fifoPath = path + "/Source/Tests/FIFO";
    // std::cout << fifoPath << std::endl;
    
    // int err = mkfifo(fifoPath.c_str(), 0777);
    // if(err == -1)
    // {
    //     printf("Error creating FIFO: %s\n", strerror(errno));
    // }

    // std::ifstream f(fifoPath);
    // while(true)
    // {
    //     if(!f.is_open())
    //     {
    //         f.open(fifoPath);
    //     }

    //     std::string line = "";
    //     getline(f, line);

    //     if(line == "")
    //     {
    //         f.close();
    //         continue;
    //     }

    //     std::uint32_t size = std::stoi(line);
    //     getline(f, line);
    //     std::cout << line << std::endl;
    //}

    // Extractor::FeatureMask mask;
    // //areAllBitsSet(mask.mask);
    // //extractFromDirectory(path, mask, true);

    // //build feature set to insert
    // DB::DBManager manager;
    // Extractor::FeatureSet set;
    // set.fileHash = 50;
    // set.filepath = "/path/to/file";
    // set.shortname = "file";
    // set.isMalicious = false;
    // set.numExeSections = 200;
    // set.numSections = 250;
    // set.type = Extractor::PE32_PLUS;
    // set.virtualSize = 2000;
    // set.virtualTextSizeRatio = 10.15;
    
    // for(std::size_t i = Extractor::LoadLibraryA; i < Extractor::FUNCTION_SEARCH_SIZE; ++i)
    // {
    //     set.functions[i] = true;
    // }
    
    // //build ngram for the featureset
    // Extractor::nGram ngram;
    // ngram.frequency = 10000;
    // ngram.hash = 1234123;
    // ngram.size = 4;
    // ngram.type = Extractor::X86;
    // ngram.ngram = "push push push push";
    // set.nGrams.emplace_back(ngram);
    // //insert file
    // manager.insertFile(set);
    
    // //get file
    // std::unique_ptr<Extractor::IFile> file;
    // file = manager.queryFile(set.shortname);

    // //print values to test
    // std::cout << "Shortname: " << file->getFeatureSet().shortname << std::endl;
    // std::cout << "filepath: " << file->getFeatureSet().filepath << std::endl;
    // std::cout << "fileHash: " << file->getFeatureSet().fileHash << std::endl;
    // std::cout << "Function[0]: " << file->getFeatureSet().functions[0] << std::endl;
    // std::cout << "numExeSections: " << file->getFeatureSet().numExeSections << std::endl;
    // std::cout << "numSections: " << file->getFeatureSet().numSections << std::endl;
    
    // for(auto& ngram : file->getFeatureSet().nGrams)
    // {   
    //     std::cout << "ngram: " << ngram.ngram << std::endl;
    //     std::cout << "frequency: " << ngram.frequency << std::endl;
    //     std::cout << "hash: " << ngram.hash << std::endl;
    //     std::cout << "size: " << ngram.size << std::endl;
    //     std::cout << "type(Enum): " << ngram.type << std::endl;
    // }
    //ThreadPool pool(-1);
    // while(true){}
    // ThreadPool pool;
    // std::vector<std::future<unsigned>> vec;
    // testclass t;
    // for(int i = 0; i < 5; ++i)
    // {
    //     auto func = std::bind(&testclass::getThread, &t);
    //     pool.push(func);
    // }

    // std::string test = "hello";
    // std::string test1 = "hello2";
    
    // Trie t;
    
    // t.insert(test);
    // std::cout << (t.search("Hello")  ? "PASS" : "FAIL") << std::endl;
    // std::cout << (t.search(test1) ? "FAIL" : "PASS") << std::endl;

    // t.insert(test1);
    // std::cout << (t.search("hello2")  ? "PASS" : "FAIL") << std::endl;

    // t.remove(test1);

    // std::cout << (t.search("hello2")  ? "FAIL" : "PASS") << std::endl;

   
/* ----------------------- STD::HASH AND STD::UNORDERED_MAP ARE TEH SAME HASh FCN ----------- */
    // std::unordered_map<std::string, int> m;
    // std::unordered_map<std::size_t, int> map;

    // typedef std::unordered_map<std::string,std::string> stringmap;
    // stringmap mymap;

    // stringmap::hasher fn = mymap.hash_function();
    // m["Hello"] = 5;
    // for (auto a : m)
    //     std::cout << fn("Hello") << std::endl;
    // map[std::hash<std::string>{}("Hello")] = 10;
    
    // for (auto a : map)
    //     std::cout << a.first << std::endl;
/*---------------------------------------------------*/
    return 0;


}