#pragma once

#include <iostream>
#include <xmmintrin.h>
#include <pmmintrin.h>

namespace SIMD{
    
    namespace SSE{
        
        class vec4{
            
            public:
                /* constructors*/
                vec4(float x, float y, float z, float w){
                    xmm_ =_mm_set_ps(w,z,y,x); // memory is reversed
                }
                vec4(const vec4 &rhs)
                    : xmm_(rhs.xmm_)
                {}
                /* end constructors*/

                /* operators */
                vec4& operator*=(const vec4 v){
                    xmm_ = _mm_mul_ps(xmm_, v.xmm_);
                    return *this;
                }
                
                vec4& operator*(const vec4 v){
                    xmm_ = _mm_mul_ps(xmm_, v.xmm_);
                    return *this;
                }
                
                vec4& operator*(const float v){
                    xmm_ = _mm_mul_ps(xmm_, vec4(v,v,v,v).xmm_);
                    return *this;
                }

                vec4& operator+(const vec4 v){
                    xmm_ = _mm_add_ps(xmm_, v.xmm_);
                    return *this;
                }

                vec4& operator+(const float v){
                    xmm_ = _mm_add_ps(xmm_, vec4(v,v,v,v).xmm_);
                    return *this;
                }

                vec4& operator-(const vec4 v){
                    xmm_ = _mm_sub_ps(xmm_, v.xmm_);
                    return *this;
                }

                friend std::ostream& operator<<(std::ostream& output, const vec4& v){
                    float* mem = (float*)&v;
                    output << "<" << mem[0] << ", " << mem[1] << ", " << mem[2] << ", " << mem[3] << ">\n";
                    return output;
                }
                /* end operators */

                /*math friend functions*/
                friend float dot(const vec4& v, const vec4& u);
                friend vec4& cross(const vec4& v, const vec4& u);
                friend vec4& abs(const vec4& v);
                
            private:
                __m128 xmm_;
        };


    }
}