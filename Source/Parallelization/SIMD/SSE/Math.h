#include "vec4.h"

namespace SIMD{

    namespace SSE{
        
        float dot(const vec4& v, const vec4& u){
            __m128 mulRes, shufReg, sumsReg;
             mulRes = _mm_mul_ps(v.xmm_, u.xmm_);

            // Calculates the sum of SSE Register - https://stackoverflow.com/a/35270026/195787
            shufReg = _mm_movehdup_ps(mulRes);        // Broadcast elements 3,1 to 2,0
            sumsReg = _mm_add_ps(mulRes, shufReg);
            shufReg = _mm_movehl_ps(shufReg, sumsReg); // High Half -> Low Half
            sumsReg = _mm_add_ss(sumsReg, shufReg);
            return _mm_cvtss_f32(sumsReg);
        }

        vec4& cross(const vec4& v, const vec4& u){
            //TODO: IMPLEMENT CROSS PRODUCT
        }
        
        vec4& abs(const vec4& v){
            //TODO: IMPLEMENT ABS
        }         
    }
}