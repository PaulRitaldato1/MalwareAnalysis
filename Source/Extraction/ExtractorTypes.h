#pragma once
#include <unordered_map>
#include <string>
#include <iostream>
#include <vector>
#include <array>
namespace Extractor
{
    
    //use to set flags in FeatureMask
    enum FeatureOpt
    {
        NUM_EXE_SECTIONS = 1 << 0,
        VIRTUAL_RAW_RATIO = 1 << 1,
        NGRAMS = 1 << 2,
        //TEXT_SIZE = 1 << 3,
        NUM_SECTIONS = 1 << 3,
        FUNCTION_SEARCH = 1 << 4
    };

    //Use with FeatureOpt to decide what features to extract. Defaults to everything. Standard bit field
    struct FeatureMask
    {
        //default mask is for all features
        FeatureMask()
        { 
            mask = 0;
            mask |= ~mask;
        }

        FeatureMask(unsigned char options)
        {
            mask = options;
        }

        FeatureMask(const FeatureMask& src) { mask = src.mask; }
        unsigned char mask;
    };

    //used to provide FileFactory with a set of types it is allowed to return
    enum filetype
    {
        PE32,
        PE32_PLUS,
        ELF,
        UNKNOWN_FILETYPE,

        FILETYPE_SIZE
    };

    enum nGramType
    {
        X86,
        UNKNOWN_NGRAM
    };

    enum FunctionSearch
    {
        LoadLibraryA,
        GetProcAddress,
        VirtualFree,
        LocalFree,
        SetLastError,
        RegCloseKey,

        FUNCTION_SEARCH_SIZE
    };

    struct nGram
    {
        unsigned int ngid;
        std::size_t hash;
        nGramType type;
        unsigned int size; //size of ngram in words
        unsigned int frequency;
        unsigned int fileFrequency;
        std::string ngram;
    };

    //A feature set represents all features extracted from one file
    struct FeatureSet
    {
        unsigned int fid;
        unsigned int numSections;
        unsigned int numExeSections;
        unsigned int virtualSize;
        bool isMalicious;
        double virtualTextSizeRatio;
        std::array<bool, FUNCTION_SEARCH_SIZE> functions;
        std::size_t fileHash;
        std::vector<nGram> nGrams; //key: hash of string, data: nGram object
        std::string filepath;
        std::string shortname;
        filetype type;
    };

    //description of a directory 
    struct DirectoryDesc
    {
        std::string path;
        FeatureMask mask;
        bool isMalicious;
    };

    //used to pass around contents of a file BEFORE features are extracted
    struct FileDesc : public DirectoryDesc
    {
        FileDesc() {}
        FileDesc(std::string fileName) : 
            fileName(fileName)
            {}

        //copy contstructor
        FileDesc(const FileDesc& src) {fileName = src.fileName;}
        std::string fileName;
    };
}