#pragma once
#include <unordered_map>
#include "../Parallelization/Threading/ThreadPool.h"

namespace Extractor
{
    struct FeatureMask
    {
        unsigned int mask : sizeof(FeatureOpt);
    };

    enum FeatureOpt
    {
        numExeSections = 1 << 0,
        virtualSize = 1 << 1,
        nGrams = 1 << 2,
        textSize = 1 << 3,
        numSections = 1 << 4
    };

    enum filetype
    {
        PE_32_BIT,
        PE_64_BIT,
        ELF
    };

    struct FeatureSet
    {
        uint16_t numSections;
        uint16_t numExeSections;
        unsigned int fileHash;
        long virtualSize;
        long textSize;
        std::unordered_map<unsigned int, std::string> nGrams; //key: hash of string, data: nGram as a string
        std::string filename;
    };

    class IExtractor
    {
        public:
            virtual std::vector<FeatureSet> extract() = 0;
        
        protected:
            ThreadPool* pool;
    };
}