#pragma once

#include "PEFile.h"
#include "../IExtractor.h"

namespace Extractor
{
    namespace PE
    {
        class PE32FileFeatureExtractor : public IExtractor
        {
           
            public:
                PE32FileFeatureExtractor(std::string filename, FeatureMask featureMask) : m_featureMask(featureMask)
                {
                    pool = new ThreadPool();
                }

                PE32FileFeatureExtractor(std::string filename) 
                {
                    //set to use all features 
                    m_featureMask.mask |= ~m_featureMask.mask;
                    pool = new ThreadPool();
                }

                PE32FileFeatureExtractor();
                virtual std::vector<FeatureSet> extract();

            private:

                FeatureMask m_featureMask;
                std::vector<PEFile32*> m_pefile32List;
        };

        class PE64FileFeatureExtractor : public IExtractor
        {
           
            public:
                PE64FileFeatureExtractor(std::string filename, FeatureMask featureMask) : m_featureMask(featureMask)
                {
                    pool = new ThreadPool();
                }

                PE64FileFeatureExtractor(std::string filename)
                {
                    //set to use all features 
                    m_featureMask.mask |= ~m_featureMask.mask;
                    pool = new ThreadPool();
                }

                PE64FileFeatureExtractor();
                
                virtual std::vector<FeatureSet> extract();

            private:

                FeatureMask m_featureMask;
                std::vector<PEFile64*> m_pefile64List;
        };
    }
}