#pragma once

#ifndef _WIN32
#include "WinAPITypeDefs.h"
#endif
#include "../IFile.h"
#include <fstream>
#include <string>
#include <experimental/filesystem>

namespace fs = std::experimental::filesystem;

namespace Extractor
{
    
    namespace PE
    {

        class PEFile32 : public IFile
        {
            public:
                PEFile32(std::ifstream& file, FileDesc desc) : m_desc(desc)
                {
                }

                std::vector<FeatureSet> extractFeatures();
            
            private:
                PIMAGE_DOS_HEADER dosHeader;
                PIMAGE_NT_HEADERS imageNTHeaders;
                PIMAGE_SECTION_HEADER sectionHeader;
                PIMAGE_SECTION_HEADER importSection;
                IMAGE_IMPORT_DESCRIPTOR* importDescriptor;
                PIMAGE_THUNK_DATA thunkData;
                DWORD thunk;
                DWORD rawOffset;

                FileDesc m_desc;

        };

        class PEFile64 : public IFile{
            public:
                PEFile64(std::ifstream& file, FileDesc desc)
                {}

                std::vector<FeatureSet> extractFeatures();
            private:
        };

    }

}