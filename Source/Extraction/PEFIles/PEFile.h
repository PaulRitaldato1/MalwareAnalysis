#pragma once

//#ifdef _WIN32
#include "WinAPITypeDefs.h"
//#endif
#include "../IFile.h"
#include <fstream>
#include <string>
#include <experimental/filesystem>

namespace fs = std::experimental::filesystem;

namespace Extractor
{
    
    namespace PE
    {

        class PEFile32 : public IFile
        {
            public:
                PEFile32(std::shared_ptr<std::ifstream> file, FileDesc desc) : m_fileHandle(file)
                {
                    //TODO: FILL OUT FILE WITH FILEDESC, DO NOT KEEP IT AROUND
                }

                PEFile32()
                {
                    m_fileHandle = nullptr;
                }

                PEFile32() {}
                std::shared_ptr<FeatureSet> extractFeatures();
                void setFeatures(FeatureSet featureSet) { m_featureSet = featureSet; }
            private:
                PIMAGE_DOS_HEADER dosHeader;
                PIMAGE_NT_HEADERS imageNTHeaders;
                PIMAGE_SECTION_HEADER sectionHeader;
                PIMAGE_SECTION_HEADER importSection;
                IMAGE_IMPORT_DESCRIPTOR* importDescriptor;
                PIMAGE_THUNK_DATA thunkData;
                DWORD thunk;
                DWORD rawOffset;

                std::shared_ptr<std::ifstream> m_fileHandle;
        };

        class PEFile64 : public IFile
        {
            public:
                PEFile64() 
                {
                    m_fileHandle = nullptr;
                }
                PEFile64(std::shared_ptr<std::ifstream> file, FileDesc desc)
                {}

                std::shared_ptr<FeatureSet> extractFeatures();
            private:
                std::shared_ptr<std::ifstream> m_fileHandle;
                
        };

    }

}