#include "WinAPITypeDefs.h"
#include <fstream>
#include <string>
#include <experimental/filesystem>

namespace fs = std::experimental::filesystem;

namespace Extractor{
    
    namespace PE{

        struct PEFile32
        {
            public:
                PEFile32(std::string& filepath) : m_filename(filepath)
                {
                    std::ifstream file(filepath, std::ios::binary);
                    if (!file.is_open())
                    {
                        throw std::runtime_error("PEFile.h: extracor::PE::PEFile::PEFile(std::string): Failed to open file " + filepath);
                    }
                    
                    DWORD filesize = fs::file_size(fs::path(filepath));
                    char* fileData = new char(filesize); 

                    file.read(fileData, filesize);

                    dosHeader = (PIMAGE_DOS_HEADER)fileData;
                    imageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD)fileData + dosHeader->e_lfanew);
                    DWORD sectionLocation = (DWORD)imageNTHeaders + sizeof(DWORD) + (DWORD)(sizeof(IMAGE_FILE_HEADER)) + (DWORD)imageNTHeaders->FileHeader.SizeOfOptionalHeader;
	                DWORD sectionSize = (DWORD)sizeof(IMAGE_SECTION_HEADER);
                    
                    DWORD importDirectoryRVA = imageNTHeaders->OptionalHeader.DataDirectory[1].VirtualAddress;
                }

                inline bool isFileMalicious(){ return m_isMalicious; }; 
                inline std::string getFilename() { return m_filename; };
            private:
                PIMAGE_DOS_HEADER dosHeader;
                PIMAGE_NT_HEADERS imageNTHeaders;
                PIMAGE_SECTION_HEADER sectionHeader;
                PIMAGE_SECTION_HEADER importSection;
                IMAGE_IMPORT_DESCRIPTOR* importDescriptor;
                PIMAGE_THUNK_DATA thunkData;
                DWORD thunk;
                DWORD rawOffset;

            protected:
                bool m_isMalicious;
                std::string& m_filename;
        };

        struct PEFile64{
            public:
            private:
        };

    }

}