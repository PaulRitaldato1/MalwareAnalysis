#pragma once

#include "IFile.h"
#include "PEFiles/PEFile.h"
#include <utility>
#include <memory>

namespace Extractor
{
    //a bit of a modification on the typical factory DP. This factory produces many extractors. It can be reused and creates one object per makeExtractor() call
    class FileFactory
    {
        public:
            FileFactory() {}

            inline std::unique_ptr<IFile> makeFile(FileDesc& desc)
            {
                std::pair<std::shared_ptr<std::ifstream>, filetype> fileType = checkFiletype(desc.fileName);
                if(fileType.second == PE32)
                    return std::make_unique<IFile>(PE::PEFile32(fileType.first, desc));
                else if(fileType.second == PE32_PLUS)
                    return std::make_unique<IFile>(PE::PEFile64(fileType.first, desc));
                else
                    return nullptr;
            }
        private:
            std::pair<std::unique_ptr<std::ifstream>, filetype> checkFiletype(std::string path);
    };
}