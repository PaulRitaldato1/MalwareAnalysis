#pragma once

#include "IFile.h"
#include "PEFiles/PEFile.h"
#include <utility>

namespace Extractor
{
    //a bit of a modification on the typical factory DP. This factory produces many extractors. It can be reused and creates one object per makeExtractor() call
    class FileFactory
    {
        public:
            FileFactory() {}

            inline IFile* makeFile(FileDesc& desc)
            {
                std::pair<std::ifstream, filetype> fileType = checkFiletype(desc.fileName);
                if(fileType.second == PE32)
                    return new PE::PEFile32(fileType.first, desc);
                else if(fileType.second == PE32_PLUS)
                    return new PE::PEFile64(fileType.first, desc);
                else
                    return nullptr;
            }
        private:
            std::pair<std::ifstream, filetype> checkFiletype(std::string path);
    };
}