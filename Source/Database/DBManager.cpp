#include "DBManager.h"
#include "../global/Macros.h"
#include <string>
#include <array>
namespace DB
{
    DBManager::DBManager()
    {
        const char*  query = "SELECT name FROM sqlite_master WHERE type='table' AND name='?';";

        std::array<std::string, 4> schema = {
            "CREATE TABLE IF NOT EXISTS NGram("
                "ngid INTEGER PRIMARY_KEY,"
                "ngram TEXT NOT NULL,"
                "string_hash INTEGER NOT NULL,"
            ");",

            "CREATE TABLE IF NOT EXISTS File("
                "fid INTEGER PRIMARY KEY"
                "name TEXT NOT NULL"
                "hash INTEGER NOT NULL"
                "type TEXT CHECK(type IN ('pe32', 'pe32+', 'elf')) NOT NULL"
                "date_added DATE"
                "is_malicious BOOLEAN NOT NULL"
                "virtual_size INTEGER NOT NULL"
                "num_exe_sections INTEGER NOT NULL"
                "num_sections INTEGER NOT NULL"
                "vr_ratio REAL NOT NULL"
                "LoadLibraryA BOOLEAN NOT NULL"
                "GetProcAddress BOOLEAN NOT NULL"
                "VirtualFree BOOLEAN NOT NULL"
                "LocalFree BOOLEAN NOT NULL"
                "SetLastError BOOLEAN NOT NULL"
                "RegCloseKey BOOLEAN NOT NULL"
            ");",

            "CREATE TABLE IF NOT EXISTS FileNGrams("
                "fid INTEGER"
                "ngid INTEGER"
                "PRIMARY KEY (fid, ngid)"
                "FOREIGN KEY (fid)"
                    "REFERENCES File (fid)"
                        "ON DELETE CASCADE"
                        "ON UPDATE NO ACTION"
                "FOREIGN KEY (ngid)"
                    "REFERENCES NGram (ngid)"
                        "ON DELETE CASCADE"
                        "ON UPDATE NO ACTION"
            ");",

            "CREATE TABLE IF NOT EXISTS FilteredNGrams("
                "ngid INTEGER"
                "PRIMARY KEY(ngid)"
                    "REFERENCES NGram(ngid)"
                        "ON DELETE CASCADE"
                        "ON UPDATE NO ACTION"
            ");"
        };
        int returnCode = sqlite3_open("../../Data/Database/Malware.db", &connection);
        
        FATAL_ASSERT(returnCode == 0, "DB::DBManager::DBManager: Failed to open database connection!");
        
        
    }

    DBManager::~DBManager()
    {
        sqlite3_close(connection);
    }

}