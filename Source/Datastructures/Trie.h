#pragma once

#include <string>
#include <unordered_map>
#include <memory>

class Trie
{

    public:

        Trie()
        {
            root = std::make_shared<Node>();
        }

        void insert(std::string& word);
        void insert(std::string&& inWord);

        void remove(std::string& word);
       
        bool search(std::string& word);
        bool search(std::string&& inWord);
   
    private:

        struct Node
        {
            Node(){}

            std::unordered_map<char, std::shared_ptr<Node>> charMap;
            bool isWord = false;

            Node(const Node& node2) { charMap = node2.charMap; isWord = node2.isWord; }
        };

        std::shared_ptr<Node> root;

        inline std::string toLower(std::string& word)
        {
            std::string retString;
            for(char& c : word)
                retString += std::tolower(c);
            return retString;
        }

        inline bool hasChildren(std::shared_ptr<Node> node)
        {
            return node->charMap.empty();
        }
};