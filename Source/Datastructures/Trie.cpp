#include "Trie.h"
#include <assert.h>
#include <iostream>
#include <stack>

void Trie::insert(std::string& inWord)
{

    std::string word = toLower(inWord);
    std::shared_ptr<Node> temp = root;
    for(unsigned i = 0; i != word.size(); ++i)
    {
        char& key = word[i];
        temp->charMap.find(key);
        
        //check if char is in current node, if not, insert it
        if(temp->charMap.find(key) == temp->charMap.end())
        {
            temp->charMap.emplace(key, std::make_shared<Node>());
        }

        temp = temp->charMap[key];

    }

    temp->isWord = true;
}

void Trie::insert(std::string&& inWord)
{
    std::string word = toLower(inWord);
    std::shared_ptr<Node> temp = root;

    for(unsigned i = 0; i != word.size(); ++i)
    {

        char& key = word[i];
        
        //check if char is in current node, if not, insert it
        if(temp->charMap.find(key) == temp->charMap.end())
        {
            temp->charMap.emplace(key, std::make_shared<Node>());
        }
        temp = temp->charMap[key];

    }
    
    temp->isWord = true;
}

void Trie::remove(std::string& inWord)
{
    std::string word = toLower(inWord);

    std::shared_ptr<Node> temp = root;
    
    //get all the nodes belonging to a word
    std::stack<std::pair<std::shared_ptr<Node>, char>> wordStack;
    for(int i = 0; i != word.size(); ++i)
    {
        wordStack.push(std::make_pair(temp, word[i]));
        temp = temp->charMap[word[i]];
    }

    while(!wordStack.empty())
    {
        if(!hasChildren(wordStack.top().first))
        {
            wordStack.pop();
            wordStack.top().first->charMap.erase(wordStack.top().second);
        }
        else if(wordStack.size() == word.size())
        {
            wordStack.top().first->isWord = false;
            return;
        }
        else
        {
            return;
        }

    }
}

bool Trie::search(std::string& inWord)
{
    std::string word = toLower(inWord);
    std::shared_ptr<Node> temp = root;
    for(unsigned i = 0; i != word.size(); ++i)
    {
        char& key = word[i];

        if(temp->charMap.find(key) == temp->charMap.end())
        {
            return false;
        }
        temp = temp->charMap[key];
    }
    assert(temp->isWord == true);
    return temp->isWord;
}

bool Trie::search(std::string&& inWord)
{
    std::string word = toLower(inWord);
    std::shared_ptr<Node> temp = root;
    for(unsigned i = 0; i != word.size(); ++i)
    {
        char& key = word[i];
        if(temp->charMap.find(key) == temp->charMap.end())
        {
            return false;
        }
        temp = temp->charMap[key];
    }
    assert(temp->isWord == true);
    return temp->isWord;
}