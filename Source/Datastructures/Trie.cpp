#include "Trie.h"
#include <assert.h>
#include <iostream>
#include <stack>

void Trie::insert(std::string& inWord)
{
    std::string word = toLower(inWord);
    Node* temp = root;
    for(unsigned i = 0; i != word.size(); ++i)
    {
        char& key = word[i];
        
        //check if char is in current node, if not, insert it
        if(temp->charMap.find(key) == temp->charMap.end())
        {
            temp->charMap.emplace(key, new Node());
            temp->charMap[key]->parent = temp;
        }

        temp = temp->charMap[key];

    }

    temp->isWord = true;
}

void Trie::insert(std::string&& inWord)
{
    std::string word = toLower(inWord);
    Node* temp = root;
    for(unsigned i = 0; i != word.size(); ++i)
    {
        char& key = word[i];
        
        //check if char is in current node, if not, insert it
        if(temp->charMap.find(key) == temp->charMap.end())
        {
            temp->charMap.emplace(key, new Node());
            temp->charMap[key]->parent = temp;
        }
        temp = temp->charMap[key];

    }
    
    temp->isWord = true;
}

void Trie::remove(std::string& inWord)
{
    std::string word = toLower(inWord);

    Node* temp = root;
    internalRemove(temp, word);
}

void Trie::internalRemove(Node* node, std::string word)
{
    // if(word.size() == 1)
    // {
    //     node->isWord = false;

    //     if(!hasChildren(node))
    //     {
    //         node->parent->charMap.erase(word[0]);
    //         delete node;
    //     }

    //     return;
    // }

    // internalRemove(node->charMap[word[0]], word.substr(1));
}

bool Trie::search(std::string& inWord)
{
    std::string word = toLower(inWord);
    Node* temp = root;
    for(unsigned i = 0; i != word.size(); ++i)
    {
        char& key = word[i];

        if(temp->charMap.find(key) == temp->charMap.end())
        {
            return false;
        }
        temp = temp->charMap[key];
    }
    assert(temp->isWord == true);
    return temp->isWord;
}

bool Trie::search(std::string&& inWord)
{
    std::string word = toLower(inWord);
    Node* temp = root;
    for(unsigned i = 0; i != word.size(); ++i)
    {
        char& key = word[i];
        if(temp->charMap.find(key) == temp->charMap.end())
        {
            return false;
        }
        temp = temp->charMap[key];
    }
    assert(temp->isWord == true);
    return temp->isWord;
}